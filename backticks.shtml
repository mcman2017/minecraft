<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html lang="en">
<head>

<title>UNIX, grep, vi, awk, find, sort, uniq, tips, tricks and code examples</title>

<meta name="description" content="Free tutorials and UNIX code examples.  grep, vi, awk, find, sort, uniq, tips, tricks, LINUX, UBUNTU, html, web server">
<meta name="keywords" content="tutorial, code examples, rep, vi, awk, find, sort, uniq, tips, tricks, LINUX, UBUNTU, html, web server">
<meta http-equiv="Content-type" content="text/html;charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta name="viewport" content="width=device-width, initial-scale=1">
<link rel="stylesheet" type="text/css" media="all" href="styles.css">
<link rel="stylesheet" type="text/css" href="tswnavbar.css" >


</head>

<body>

<div id="container">
	<div id="header">
	<!-- start of header section: insert your logo, etc, here -->

	<p>UNIX, grep, vi, awk, find, sort, uniq, tips, tricks and code examples.</p>


	<!-- end of header section: insert your logo, etc, above this line -->
	</div>

<div id="content">
<div id="contproper">
	<!-- start of content column: insert your content here -->

	<h1>backticks</h1>
	
	<p> Coming soon!  Below is awk-nawk stuff</p> <p>
     awk is a great Ye Old Tyme UNIX command.  Whole books have been written about it.  Below are just a few examples that I find most useful
	</p>
	
	<ol>
	<li>Using awk to get filenames from a long listing.  Why is this useful?  Why is this useful?

	  Let's say you have a directory filled with log files; some are today's and others are old/outdated. 
	 You want to do a long listing to get the file update times, and then want to grep with just the filenames. <br>
	 Use *awk* to accomplish this.  Here's how: <br><br>
	<div class="boxed">
	 &nbsp ls -lrt | grep "May 17" | awk '{print $9}' 
	</div>
	<br>
	 **Above will print a list of filenames updated on May 17th.  To grep in this list of filenames, enclose this command in back ticks like this: <br><br>
	<div class="boxed">
		&nbsp grep mySearchText `ls -lrt | grep "May 17" | awk '{print $9}'`
	  
	</div>
		<br>
	</li>

	<li> awk returns "has too many fields" error.  Solution:  use nawk instead. <br><br> </li>
	
	<li>  using a different field seperator.  Use the -F option.  You may need to place it in double quotes. <br>
	 For example: to print the 9th field, seperated by semi-colons (;), use this: <br><br>
	
	<div class="boxed">
	 &nbsp awk "-F;" '{print $9}' yourSearchFile 
	</div>
	<br>
	**Replace yourSearchFile above with the name of your file. <br><br>
	</li>
	<li> Putting it all together: <br>
        <div class="boxed">
		grep -i error `ls -lrt *rt* | grep -i debug | grep "Jun  9" | awk '{print $9}'` > /tmp/myResults
	</div>
	** The expression in back ticks, ``, is executed first.  It finds files
	with the word debug in them that were updated today, June 9th.  
	A long listing is needed for that.  The final awk strips away everything 
	but the filename.  Finally, I grep for error (case Insensitive) in this list of files.  I will have another page on how to use backticks.
	</li>
	</ol>
	
	<p>
	Enjoy!
	</p>
	<p>&nbsp;</p>

	<!-- end of content column: put your content above this line -->
	</div>
	</div>
<!--#include virtual="navbarandfooter.html" -->

</body>

</html>
